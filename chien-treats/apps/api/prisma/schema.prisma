generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  guest
  customer
  staff
  support
  admin
}

enum ReviewStatus {
  pending
  approved
  rejected
}

enum TicketStatus {
  open
  in_progress
  waiting
  closed
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

model User {
  id                 String                   @id @default(cuid())
  email              String                   @unique
  name               String
  role               Role                     @default(customer)
  emailVerifiedAt    DateTime?
  passwordHash       String
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt

  tickets            Ticket[]                 @relation("TicketAssignee")
  requestedTickets   Ticket[]                 @relation("TicketRequester")
  refreshTokens      RefreshToken[]
  auditLogs          AuditLog[]               @relation("AuditActor")
  verificationTokens EmailVerificationToken[]
}

model Product {
  id            String   @id @default(cuid())
  slug          String   @unique
  name          String
  subtitle      String?
  priceCents    Int
  flavors       String[] @default([])
  tags          String[] @default([])
  isAvailable   Boolean  @default(true)
  images        String[] @default([])
  descriptionMd String
  nutrition     Json?
  allergens     String[] @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  reviews       Review[]

  @@index([name])
  @@index([isAvailable])
}

model Review {
  id              String       @id @default(cuid())
  productId       String
  userName        String
  rating          Int
  title           String?
  body            String
  status          ReviewStatus @default(pending)
  rejectionReason String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@index([status])
}

model Coupon {
  code           String  @id
  pctOff         Int?
  amountOffCents Int?
  active         Boolean @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Order {
  id            String   @id @default(cuid())
  number        String   @unique
  items         Json
  subtotalCents Int
  taxCents      Int
  shippingCents Int
  totalCents    Int
  customer      Json
  shipping      Json?
  payment       Json
  customerId    String?
  couponCode    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([createdAt])
  @@index([customerId])
}

model Ticket {
  id             String         @id @default(cuid())
  number         String         @unique
  title          String
  body           String
  status         TicketStatus   @default(open)
  priority       TicketPriority @default(medium)
  labels         String[]       @default([])
  requesterEmail String
  requesterId    String?
  accessCodeHash String
  orderId        String?
  assigneeId     String?
  watchers       String[]       @default([])
  internalNotes  Json           @default("[]")
  attachments    Json           @default("[]")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  assignee  User? @relation("TicketAssignee", fields: [assigneeId], references: [id])
  requester User? @relation("TicketRequester", fields: [requesterId], references: [id])

  @@index([status])
  @@index([priority])
  @@index([assigneeId])
  @@index([requesterEmail])
  @@index([requesterId])
}

model ContentBlock {
  id        String   @id @default(cuid())
  key       String   @unique
  title     String
  bodyMd    String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model EmailLog {
  id        String   @id @default(cuid())
  template  String
  toEmail   String
  subject   String
  meta      Json?
  createdAt DateTime @default(now())
}

model AuditLog {
  id       String   @id @default(cuid())
  actorId  String?
  action   String
  entity   String
  entityId String
  payload  Json?
  createdAt DateTime @default(now())

  actor User? @relation("AuditActor", fields: [actorId], references: [id])

  @@index([entity, entityId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}
