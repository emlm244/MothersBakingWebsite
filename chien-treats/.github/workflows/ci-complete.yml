name: CI (Complete with API Testing)

on:
  push:
    branches: [main, develop]
  pull_request:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Frontend testing (existing)
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint (Frontend)
        run: pnpm lint

      - name: Typecheck (Frontend)
        run: pnpm typecheck

      - name: Unit Tests (Frontend)
        run: pnpm test

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: E2E Tests (Frontend)
        run: pnpm test:e2e

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Backend API testing (NEW)
  api:
    name: API Tests
    runs-on: ubuntu-latest

    # Service containers for PostgreSQL and Redis
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: chiens_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chiens_test
      REDIS_URL: redis://localhost:6379/0
      JWT_SECRET: test-secret-key-minimum-32-characters-for-testing
      APP_ENV: test
      STRIPE_PUBLIC_KEY: pk_test_fake
      STRIPE_SECRET_KEY: ''
      STRIPE_WEBHOOK_SECRET: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm exec prisma generate
        working-directory: apps/api

      - name: Run Database Migrations
        run: pnpm api:migrate
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chiens_test

      - name: Lint (API)
        run: pnpm api:lint

      - name: Typecheck (API)
        run: pnpm api:typecheck

      - name: Unit & Integration Tests (API)
        run: pnpm api:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chiens_test
          REDIS_URL: redis://localhost:6379/0

      - name: Coverage Report (API)
        run: pnpm api:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/chiens_test
          REDIS_URL: redis://localhost:6379/0

      - name: Check Coverage Threshold (≥85%)
        run: |
          # Extract coverage percentage from lcov report
          # This is a placeholder - update based on actual coverage reporter output
          # For now, we'll just check if coverage directory exists
          if [ ! -d "apps/api/coverage" ]; then
            echo "❌ Coverage directory not found - tests may not have run"
            exit 1
          fi
          echo "✅ Coverage report generated"
          # TODO: Add actual threshold check when tests exist
          # Example: nyc check-coverage --lines 85 --functions 85 --branches 85

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./apps/api/coverage/lcov.info
          flags: api
          name: api-coverage
          fail_ci_if_error: false

      - name: Build API
        run: pnpm api:build

      - name: Verify Build Artifacts
        run: |
          if [ ! -f "apps/api/dist/main.js" ]; then
            echo "❌ API build failed - main.js not found"
            exit 1
          fi
          echo "✅ API build successful"

  # OpenAPI validation (NEW)
  openapi:
    name: OpenAPI Validation
    runs-on: ubuntu-latest
    needs: [api]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm exec prisma generate
        working-directory: apps/api

      - name: Build API
        run: pnpm api:build

      - name: Start API Server (background)
        run: |
          pnpm api:start &
          echo $! > api.pid
          sleep 10
        env:
          DATABASE_URL: postgresql://fake:fake@localhost:5432/fake
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET: test-secret-key-minimum-32-characters-for-testing
          APP_ENV: test

      - name: Fetch OpenAPI Spec
        run: |
          curl -f http://localhost:4000/api/v1/openapi.json > openapi.json
          cat openapi.json | jq '.' > /dev/null  # Validate JSON

      - name: Install OpenAPI Validator
        run: npm install -g ibm-openapi-validator

      - name: Validate OpenAPI Spec
        run: |
          lint-openapi openapi.json --errors-only
          echo "✅ OpenAPI spec is valid"

      - name: Upload OpenAPI Spec
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: openapi.json
          retention-days: 90

      - name: Stop API Server
        if: always()
        run: |
          if [ -f api.pid ]; then
            kill $(cat api.pid) || true
          fi

  # Contract tests (FE/BE compatibility) - NEW
  contract:
    name: Contract Tests (FE/BE)
    runs-on: ubuntu-latest
    needs: [frontend, api]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Contract Tests
        run: |
          # Placeholder for contract tests
          # TODO: Implement tests that verify:
          # 1. API response shapes match FE models
          # 2. Zod schemas align with TypeScript types
          # 3. No breaking changes to API contracts
          echo "⚠️  Contract tests not yet implemented"
          echo "TODO: Add tests in tests/contract/"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # All tests must pass
  all-tests:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [frontend, api, openapi, contract, security]
    if: always()

    steps:
      - name: Check job results
        run: |
          if [ "${{ needs.frontend.result }}" != "success" ]; then
            echo "❌ Frontend tests failed"
            exit 1
          fi
          if [ "${{ needs.api.result }}" != "success" ]; then
            echo "❌ API tests failed"
            exit 1
          fi
          if [ "${{ needs.openapi.result }}" != "success" ]; then
            echo "❌ OpenAPI validation failed"
            exit 1
          fi
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ All tests passed!"
