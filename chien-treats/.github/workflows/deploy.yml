name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: cd chien-treats && pnpm install --frozen-lockfile

      - name: Run linting
        run: |
          cd chien-treats
          pnpm lint
          pnpm api:lint

      - name: Run type checking
        run: |
          cd chien-treats
          pnpm typecheck
          pnpm api:typecheck

      - name: Run unit tests
        run: |
          cd chien-treats
          pnpm test
          pnpm api:test

      - name: Build application
        run: |
          cd chien-treats
          pnpm build
          pnpm api:build

      - name: Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_KEY }}
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USER: ${{ secrets.VPS_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$SSH_HOST" >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USER: ${{ secrets.VPS_USER }}
          SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
        run: |
          RELEASE_DIR="/srv/sites/chienstreats/releases/$(date +%Y%m%d_%H%M%S)"
          
          # Create release directory on VPS
          ssh -i ~/.ssh/deploy_key -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} \
            "mkdir -p $RELEASE_DIR"
          
          # Rsync built application to VPS
          rsync -avz --delete \
            -e "ssh -i ~/.ssh/deploy_key -p ${SSH_PORT}" \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.next/cache' \
            --exclude='apps/api/tmp' \
            ./chien-treats/ \
            ${SSH_USER}@${SSH_HOST}:${RELEASE_DIR}/
          
          # Deploy on VPS
          ssh -i ~/.ssh/deploy_key -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} << 'ENDSSH'
            set -e
            
            RELEASE_DIR="'$RELEASE_DIR'"
            SITE_DIR="/srv/sites/chienstreats"
            
            cd $RELEASE_DIR
            
            # Install production dependencies
            pnpm install --frozen-lockfile --prod
            
            # Run database migrations
            cd apps/api && npx prisma migrate deploy && cd ../..
            
            # Symlink shared resources
            ln -sf $SITE_DIR/shared/.env $RELEASE_DIR/.env
            ln -sf $SITE_DIR/shared/.env $RELEASE_DIR/apps/api/.env
            ln -sf $SITE_DIR/shared/uploads $RELEASE_DIR/uploads
            
            # Update current symlink
            ln -sfn $RELEASE_DIR $SITE_DIR/current
            
            # Fix ownership
            chown -R chienstreats:chienstreats $RELEASE_DIR
            
            # Restart services (zero-downtime)
            sudo systemctl reload chienstreats-frontend || sudo systemctl restart chienstreats-frontend
            sudo systemctl reload chienstreats-api || sudo systemctl restart chienstreats-api
            
            # Health check
            sleep 5
            curl -f http://localhost:4000/healthz || exit 1
            curl -f http://localhost:3101/ || exit 1
            
            echo "Deployment successful: $RELEASE_DIR"
            
            # Cleanup old releases (keep last 5)
            cd $SITE_DIR/releases
            ls -t | tail -n +6 | xargs rm -rf
          ENDSSH

      - name: Verify deployment
        env:
          SSH_HOST: ${{ secrets.VPS_HOST }}
          SSH_USER: ${{ secrets.VPS_USER }}
          SSH_PORT: ${{ secrets.VPS_SSH_PORT }}
        run: |
          sleep 10
          # Check health endpoints
          ssh -i ~/.ssh/deploy_key -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} \
            "curl -f http://localhost:4000/healthz && curl -f http://localhost:3101/"

      - name: Notify on failure
        if: failure()
        run: echo "Deployment failed. Check logs for details."
